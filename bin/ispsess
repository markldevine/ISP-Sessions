#!/usr/bin/env raku

use lib '/home/mdevine/github.com/raku-Our-Grid/lib';
use Data::Dump::Tree;

use ISP::Server::Reporter;
use Our::Grid;
use Our::Utilities;

class ISP-Sessions-statistics {

    has Int $!bytes-sent            = 0;
    has Int $.bytes-sent-delta      = 0;
    has Int $!last-bytes-sent       = -1;

    method bytes-sent (Int :$BYTES_SENT) {
        return $!bytes-sent         without $BYTES_SENT;
        my $actual-bytes-sent       = $BYTES_SENT;
        $!last-bytes-sent           = $actual-bytes-sent unless $!last-bytes-sent >= 0;
        $!bytes-sent-delta          = $actual-bytes-sent - $!last-bytes-sent;
        $!bytes-sent                = $actual-bytes-sent;
        $!last-bytes-sent           = $actual-bytes-sent;
    }

    has Int $!bytes-received        = 0;
    has Int $.bytes-received-delta  = 0;
    has Int $!last-bytes-received   = -1;

    method bytes-received (Int :$BYTES_RECEIVED) {
        return $!bytes-received     without $BYTES_RECEIVED;
        my $actual-bytes-received   = $BYTES_RECEIVED;
        $!last-bytes-received       = $actual-bytes-received unless $!last-bytes-received >= 0;
        $!bytes-received-delta      = $actual-bytes-received - $!last-bytes-received;
        $!bytes-received            = $actual-bytes-received;
        $!last-bytes-received       = $actual-bytes-received;
    }
}

class Reporter does ISP::Server::Reporter {
    has %!statistics;
    has $.client-name;

    method process-headings () {
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Session'),                    :justification<right>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text("Active \x[029D6]"),           :justification<right>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Comm'),                       :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Type'),                       :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Platform'),                   :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('State'),                      :justification<right>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text("Bytes Sent +\x[0394]"),       :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text("Bytes Received +\x[0394]"),   :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Client'),                     :justification<left>);
    }

    method process-rows ($sessions) {
        my Int      $SESSION_ID;                            # 872694
        my DateTime $START_TIME;                            # 2023-02-25 15:05:15.000000
        my Str      $COMMMETHOD;                            # SSL
        my Str      $STATE;                                 # RecvW
        my Int      $WAIT_SECONDS;                          # 0
        my Int      $BYTES_SENT;                            # 1277
        my Int      $BYTES_RECEIVED;                        # 1123077711
        my Str      $SESSION_TYPE;                          # Node
        my Str      $CLIENT_PLATFORM;                       # TDP Oracle AIX
        my Str      $CLIENT_NAME;                           # CADBBUSDR10-NBUSPRD1-TDP
        my Str      $OWNER_NAME;                            #
        my Str      $MOUNT_POINT_WAIT;                      #
        my Str      $INPUT_MOUNT_WAIT;                      #
        my Str      $INPUT_VOL_WAIT;                        #
        my Str      $INPUT_VOL_ACCESS;                      #
        my Str      $OUTPUT_MOUNT_WAIT;                     #
        my Str      $OUTPUT_VOL_WAIT;                       #
        my Str      $OUTPUT_VOL_ACCESS;                     # PRMANDRSTG,/tsmstg11/00050042.BFS,142
        my Str      $LAST_VERB;                             # ConfirmResp
        my Str      $VERB_STATE;                            # Sent
        my Str      $FAIL_OVER_MODE;                        # No

        for $sessions.list -> $session {
            $CLIENT_NAME        = Nil;  $CLIENT_NAME        = $session{'CLIENT_NAME'}.Str       if $session{'CLIENT_NAME'};
            if self.client-name {
                next unless self.client-name.fc eq $CLIENT_NAME.fc;
            }
            $SESSION_ID         = 0;    $SESSION_ID         = $session{'SESSION_ID'}.Int        if $session{'SESSION_ID'};
            $START_TIME         = Nil;  $START_TIME         = $session{'START_TIME'}.DateTime   if $session{'START_TIME'};
            $COMMMETHOD         = ' ';  $COMMMETHOD         = $session{'COMMMETHOD'}.Str        if $session{'COMMMETHOD'};
            $STATE              = ' ';  $STATE              = $session{'STATE'}.Str             if $session{'STATE'};
            $WAIT_SECONDS       = 0;    $WAIT_SECONDS       = $session{'WAIT_SECONDS'}.Int      if $session{'WAIT_SECONDS'};
            $BYTES_SENT         = 0;    $BYTES_SENT         = $session{'BYTES_SENT'}.Int        if $session{'BYTES_SENT'};
            $BYTES_RECEIVED     = 0;    $BYTES_RECEIVED     = $session{'BYTES_RECEIVED'}.Int    if $session{'BYTES_RECEIVED'};
            $SESSION_TYPE       = ' ';  $SESSION_TYPE       = $session{'SESSION_TYPE'}.Str      if $session{'SESSION_TYPE'};
            $CLIENT_PLATFORM    = ' ';  $CLIENT_PLATFORM    = $session{'CLIENT_PLATFORM'}.Str   if $session{'CLIENT_PLATFORM'};
            $CLIENT_NAME        = ' ';  $CLIENT_NAME        = $session{'CLIENT_NAME'}.Str       if $session{'CLIENT_NAME'};
            $OWNER_NAME         = ' ';  $OWNER_NAME         = $session{'OWNER_NAME'}.Str        if $session{'OWNER_NAME'};
            $MOUNT_POINT_WAIT   = ' ';  $MOUNT_POINT_WAIT   = $session{'MOUNT_POINT_WAIT'}.Str  if $session{'MOUNT_POINT_WAIT'};
            $INPUT_MOUNT_WAIT   = ' ';  $INPUT_MOUNT_WAIT   = $session{'INPUT_MOUNT_WAIT'}.Str  if $session{'INPUT_MOUNT_WAIT'};
            $INPUT_VOL_WAIT     = ' ';  $INPUT_VOL_WAIT     = $session{'INPUT_VOL_WAIT'}.Str    if $session{'INPUT_VOL_WAIT'};
            $INPUT_VOL_ACCESS   = ' ';  $INPUT_VOL_ACCESS   = $session{'INPUT_VOL_ACCESS'}.Str  if $session{'INPUT_VOL_ACCESS'};
            $OUTPUT_MOUNT_WAIT  = ' ';  $OUTPUT_MOUNT_WAIT  = $session{'OUTPUT_MOUNT_WAIT'}.Str if $session{'OUTPUT_MOUNT_WAIT'};
            $OUTPUT_VOL_WAIT    = ' ';  $OUTPUT_VOL_WAIT    = $session{'OUTPUT_VOL_WAIT'}.Str   if $session{'OUTPUT_VOL_WAIT'};
            $OUTPUT_VOL_ACCESS  = ' ';  $OUTPUT_VOL_ACCESS  = $session{'OUTPUT_VOL_ACCESS'}.Str if $session{'OUTPUT_VOL_ACCESS'};
            $LAST_VERB          = ' ';  $LAST_VERB          = $session{'LAST_VERB'}.Str         if $session{'LAST_VERB'};
            $VERB_STATE         = ' ';  $VERB_STATE         = $session{'VERB_STATE'}.Str        if $session{'VERB_STATE'};
            $FAIL_OVER_MODE     = ' ';  $FAIL_OVER_MODE     = $session{'FAIL_OVER_MODE'}.Str    if $session{'FAIL_OVER_MODE'};
            %!statistics{$SESSION_ID}                       = ISP-Sessions-statistics.new   unless %!statistics{$SESSION_ID}:exists;
            %!statistics{$SESSION_ID}.bytes-sent(:$BYTES_SENT);
            %!statistics{$SESSION_ID}.bytes-received(:$BYTES_RECEIVED);

            $!grid.add-cell:    $SESSION_ID,            :justification<right>;
            my $active          = '';
            if $START_TIME {
                my $current-dt  = DateTime.new(now, :timezone(self.seconds-offset-UTC));
                $active         = seconds-to-y-d-hh-mm-ss(($current-dt.local - $START_TIME).Int);
            }
            $!grid.add-cell:        $active,            :justification<right>;
            $!grid.add-cell:        $COMMMETHOD,        :justification<left>;
            $!grid.add-cell:        $SESSION_TYPE,      :justification<left>;
            $!grid.add-cell:        $CLIENT_PLATFORM,   :justification<left>;
            if $WAIT_SECONDS && $WAIT_SECONDS > 10 {
                $!grid.add-cell:    '[' ~ seconds-to-y-d-hh-mm-ss($WAIT_SECONDS) ~ '] ' ~ $STATE.fmt("%6s"), :justification<right>;
            }
            else {
                $!grid.add-cell:    $STATE,             :justification<right>;
            }
            if %!statistics{$SESSION_ID}.bytes-sent-delta {
                my @fragments;
                my $frag1           = bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-sent); 
                my $frag2           = '+' ~ bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-sent-delta);
                @fragments.push:    Our::Grid::Cell::Fragment.new(:text($frag1), :spacebefore(8 - $frag1.chars), :1spaceafter, :trim-input(False));
                @fragments.push:    Our::Grid::Cell::Fragment.new(:text($frag2), :spacebefore(10 - $frag2.chars), :trim-input(False));
ddt @fragments;
die;
                $!grid.add-cell:    :cell(Our::Grid::Cell.new(:@fragments));
            }
            else {
                $!grid.add-cell:    bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-sent), :justification<left>;
            }
            if %!statistics{$SESSION_ID}.bytes-received-delta {
                my @fragments;
                my $text            = bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-received);
                my $spaceafter      = 8 - $text.chars;



                $!grid.add-cell:    sprintf("%8s %11s", bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-received), "+" ~ bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-received-delta)), :justification<left>;
            }
            else {
                $!grid.add-cell:    bytes-to-bytes-unit(%!statistics{$SESSION_ID}.bytes-received), :justification<left>;
            }
            my $record          =       $CLIENT_NAME;
            $record            ~=       '@FO'   if $FAIL_OVER_MODE eq 'Yes';
            $!grid.add-cell:        $record,            :justification<left>;
            $!grid.current-row++;
        }
    }
}

sub MAIN (
    Str:D   :$isp-server!,                                  #= ISP server name
    Str:D   :$isp-admin!,                                   #= ISP server name
    Int:D   :$interval      where * >= 5    = 58,           #= Refresh every --interval seconds (minimum 5s)
    Int:D   :$count                         = 1,            #= Number of refreshes (0 is infinity)
    Bool    :$clear,                                        #= Clear the screen with each iteration
    Str     :$client-name,                                  #= ISP CLIENT/NODE name
    Bool    :$nodes-only,                                   #= NODEs only
    Bool    :$servers-only,                                 #= Servers only
    Bool    :$cache,                                        #= Read from cache
    Str     :$sort-columns,
    Bool    :$csv,                                                  #= dump CSV to STDOUT
    Bool    :$gui,                                                  #= Graphical User Interface
    Bool    :$html,                                                 #= dump HTML to STDOUT
    Bool    :$json,                                                 #= dump JSON to STDOUT
#   Grid-Email-Formats  :$mail-body-format,                         #= email body format
#                       :$mail-body-format,                         #= email body format
#                       :$mail-from,                                #= email 'From:' addressee
#                       :@mail-to,                                  #= accumulate email 'To:' addressees
#                       :@mail-cc                       = (),       #= accumulate email 'Cc:' addressees
#                       :@mail-bcc                      = (),       #= accumulate email 'Bcc:' addressees
    Bool    :$text,                                                 #= TEXT print
    Bool    :$tui,                                                  #= Terminal User Interface
    Bool    :$xml,                                                  #= dump XML to STDOUT
) {
    my @sort-columns;
    @sort-columns       = $sort-columns.split(',').map({ $_.Int }) if $sort-columns;

    my @command     = ['SELECT', '*', 'FROM', 'SESSIONS'];
    if $nodes-only {
        @command.append: 'WHERE', 'SESSION_TYPE=' ~ "'" ~ 'Node' ~ "'";
    }
    elsif $servers-only {
        @command.append: 'WHERE', 'SESSION_TYPE=' ~ "'" ~ 'Server' ~ "'";
    }

    my Reporter $reporter  .= new:
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Sessions'),
                                    :@command,
                                    :$client-name,
                                    :$cache,
                                    :@sort-columns,
                                    :$csv,
                                    :$gui,
                                    :$html,
                                    :$json,
#                                   :$mail-body-format($mail-body-format ~~ Array ?? $mail-body-format[0] !! $mail-body-format),
#                                   :mail-from($mail-from ~~ Array ?? $mail-from[0] !! $mail-from),
#                                   :@mail-to,
#                                   :@mail-cc,
#                                   :@mail-bcc,
                                    :$text,
                                    :$tui,
                                    :$xml,
                                  ;
    $reporter.loop;
}

=finish
