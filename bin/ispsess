#!/usr/bin/env raku

use ISP::Server::Reporter;

class ISP-Sessions-statistics {

    constant \KILO      = 1024;
    constant \MEGA      = KILO      * 1024;
    constant \GIGA      = MEGA      * 1024;
    constant \TERA      = GIGA      * 1024;
    constant \PETA      = TERA      * 1024;

    constant \MINUTE    = 60;
    constant \HOUR      = MINUTE    * 60;
    constant \DAY       = HOUR      * 24;

    method seconds-to-d-hh-mm-ss (Int:D $total-seconds) {
        my $dhms        = 'hh:mm:ss';
        my $days        = 0;
        my $hours       = 0;
        my $minutes     = 0;
        my $seconds     = $total-seconds;
        my $result;
        if $seconds >= DAY {
            $days       = ($seconds / DAY).Int;
            $result     = $days ~ 'd ';
            $seconds   -= $days * DAY;
        }
        if $seconds >= HOUR {
            $hours      = ($seconds / HOUR).Int;
            $result    ~= $hours.fmt("%02d");
            $seconds   -= $hours * HOUR;
        }
        if $seconds >= MINUTE {
            $minutes    = ($seconds / MINUTE).Int;
            $result    ~= ':' ~ $minutes.fmt("%02d") ~ ':';
            $seconds   -= $minutes * MINUTE;
        }
        $result        ~= $seconds.fmt("%02d");
        return $result;
    }

    has Rat $!bytes-sent            = 0;
    has Rat $.bytes-sent-delta      = 0;
    has Rat $!last-bytes-sent       = -1;

    method to-bytes (Str:D $num-unit) {
        if $num-unit ~~ / ^ (\d+ '.'* \d*) \s* (\w*) $ / {
            my $real    = $0.Str.comb.grep(/ \d | '.' /).join;
            my $unit    = $1.Str with $1;
            given $unit {
                when 'K'    { return $real * KILO }
                when 'M'    { return $real * MEGA }
                when 'G'    { return $real * GIGA }
                when 'T'    { return $real * TERA }
                when 'P'    { return $real * PETA }
                default     { return $real;       }
            }
        }
    }

    method bytes-to-unit (Int:D $bytes) {
        given $bytes {
            when $_ >= PETA { return ($bytes / PETA).fmt("%.1f P"); }
            when $_ >= TERA { return ($bytes / TERA).fmt("%.1f T"); }
            when $_ >= GIGA { return ($bytes / GIGA).fmt("%.1f G"); }
            when $_ >= MEGA { return ($bytes / MEGA).fmt("%.1f M"); }
            when $_ >= KILO { return ($bytes / KILO).fmt("%.1f K"); }
            default         { return $bytes;                        }
        }
    }

    method bytes-sent (Int :$bytes-sent) {
        return $!bytes-sent         without $bytes-sent;
        my $actual-bytes-sent       = self.to-bytes($bytes-sent);
        $!last-bytes-sent           = $actual-bytes-sent unless $!last-bytes-sent >= 0;
        $!bytes-sent-delta          = $actual-bytes-sent - $!last-bytes-sent;
        $!bytes-sent                = $actual-bytes-sent;
        $!last-bytes-sent           = $actual-bytes-sent;
    }

    has Rat $!bytes-received        = 0;
    has Rat $.bytes-received-delta  = 0;
    has Rat $!last-bytes-received   = -1;

    method bytes-received (Int :$bytes-received) {
        return $!bytes-received     without $bytes-received;
        my $actual-bytes-received   = self.to-bytes($bytes-received).Rat;
        $!last-bytes-received       = $actual-bytes-received unless $!last-bytes-received >= 0;
        $!bytes-received-delta      = $actual-bytes-received - $!last-bytes-received;
        $!bytes-received            = $actual-bytes-received;
        $!last-bytes-received       = $actual-bytes-received;
    }
}

my regex date-time-regex    {
                                ^
                                $<month>        = (\d\d)
                                '/'
                                $<day-of-month> = (\d\d)
                                '/'
                                $<year>         = (\d+)
                                \s+
                                $<hour>         = (\d\d)
                                ':'
                                $<minute>       = (\d\d)
                                ':'
                                $<second>       = (\d\d)
                                '.'
                                \d ** 6
                                $
                            }

class Reporter does ISP::Server::Reporter {

    has %!statistics;

    has $.client-name;

    method process-rows (@sessions) {
        my Str      $SESSION_ID;                            # 872694
        my DateTime $START_TIME;                            # 2023-02-25 15:05:15.000000
        my Str      $COMMMETHOD;                            # SSL
        my Str      $STATE;                                 # RecvW
        my Str      $WAIT_SECONDS;                          # 0
        my Str      $BYTES_SENT;                            # 1277
        my Str      $BYTES_RECEIVED;                        # 1123077711
        my Str      $SESSION_TYPE;                          # Node
        my Str      $CLIENT_PLATFORM;                       # TDP Oracle AIX
        my Str      $CLIENT_NAME;                           # CADBBUSDR10-NBUSPRD1-TDP
        my Str      $OWNER_NAME;                            #
        my Str      $MOUNT_POINT_WAIT;                      #
        my Str      $INPUT_MOUNT_WAIT;                      #
        my Str      $INPUT_VOL_WAIT;                        #
        my Str      $INPUT_VOL_ACCESS;                      #
        my Str      $OUTPUT_MOUNT_WAIT;                     #
        my Str      $OUTPUT_VOL_WAIT;                       #
        my Str      $OUTPUT_VOL_ACCESS;                     # PRMANDRSTG,/tsmstg11/00050042.BFS,142
        my Str      $LAST_VERB;                             # ConfirmResp
        my Str      $VERB_STATE;                            # Sent
        my Str      $FAIL_OVER_MODE;                        # No

        my $row;
        for @sessions -> $session {
            $CLIENT_NAME        = Nil;  $CLIENT_NAME        = $session{'CLIENT_NAME'}.Str       if $session{'CLIENT_NAME'};
            if self.client-name {
                next unless self.client-name.fc eq $CLIENT_NAME.fc;
            }
            $SESSION_ID         = Nil;  $SESSION_ID         = $session{'SESSION_ID'}.Str        if $session{'SESSION_ID'};
            $START-TIME         = Nil;
            if $session{'START_TIME'} && $session{'START_TIME'} ~~ /<date-time-regex>/ {
                $START_TIME                 = DateTime.new(
                                                            :month($<date-time-regex><month>),
                                                            :day($<date-time-regex><day-of-month>),
                                                            :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                            :hour($<date-time-regex><hour>),
                                                            :minute($<date-time-regex><minute>),
                                                            :second($<date-time-regex><second>),
                                                          );
            }
            $COMMMETHOD         = Nil;  $COMMMETHOD         = $session{'COMMMETHOD'}.Str        if $session{'COMMMETHOD'};
            $STATE              = Nil;  $STATE              = $session{'STATE'}.Str             if $session{'STATE'};
            $WAIT_SECONDS       = Nil;  $WAIT_SECONDS       = $session{'WAIT_SECONDS'}.Str      if $session{'WAIT_SECONDS'};
            $BYTES_SENT         = Nil;  $BYTES_SENT         = $session{'BYTES_SENT'}.Str        if $session{'BYTES_SENT'};
            $BYTES_RECEIVED     = Nil;  $BYTES_RECEIVED     = $session{'BYTES_RECEIVED'}.Str    if $session{'BYTES_RECEIVED'};
            $SESSION_TYPE       = Nil;  $SESSION_TYPE       = $session{'SESSION_TYPE'}.Str      if $session{'SESSION_TYPE'};
            $CLIENT_PLATFORM    = Nil;  $CLIENT_PLATFORM    = $session{'CLIENT_PLATFORM'}.Str   if $session{'CLIENT_PLATFORM'};
            $OWNER_NAME         = Nil;  $OWNER_NAME         = $session{'OWNER_NAME'}.Str        if $session{'OWNER_NAME'};
            $MOUNT_POINT_WAIT   = Nil;  $MOUNT_POINT_WAIT   = $session{'MOUNT_POINT_WAIT'}.Str  if $session{'MOUNT_POINT_WAIT'};
            $INPUT_MOUNT_WAIT   = Nil;  $INPUT_MOUNT_WAIT   = $session{'INPUT_MOUNT_WAIT'}.Str  if $session{'INPUT_MOUNT_WAIT'};
            $INPUT_VOL_WAIT     = Nil;  $INPUT_VOL_WAIT     = $session{'INPUT_VOL_WAIT'}.Str    if $session{'INPUT_VOL_WAIT'};
            $INPUT_VOL_ACCESS   = Nil;  $INPUT_VOL_ACCESS   = $session{'INPUT_VOL_ACCESS'}.Str  if $session{'INPUT_VOL_ACCESS'};
            $OUTPUT_MOUNT_WAIT  = Nil;  $OUTPUT_MOUNT_WAIT  = $session{'OUTPUT_MOUNT_WAIT'}.Str if $session{'OUTPUT_MOUNT_WAIT'};
            $OUTPUT_VOL_WAIT    = Nil;  $OUTPUT_VOL_WAIT    = $session{'OUTPUT_VOL_WAIT'}.Str   if $session{'OUTPUT_VOL_WAIT'};
            $OUTPUT_VOL_ACCESS  = Nil;  $OUTPUT_VOL_ACCESS  = $session{'OUTPUT_VOL_ACCESS'}.Str if $session{'OUTPUT_VOL_ACCESS'};
            $LAST_VERB          = Nil;  $LAST_VERB          = $session{'LAST_VERB'}.Str         if $session{'LAST_VERB'};
            $VERB_STATE         = Nil;  $VERB_STATE         = $session{'VERB_STATE'}.Str        if $session{'VERB_STATE'};
            $FAIL_OVER_MODE     = Nil;  $FAIL_OVER_MODE     = $session{'FAIL_OVER_MODE'}.Str    if $session{'FAIL_OVER_MODE'};

            %!statistics{$SESSION_ID}                       = ISP-Sessions-statistics.new   unless %!statistics{$SESSION_ID}:exists;
            %!statistics{$SESSION_ID}.bytes-sent(:$BYTES_SENT);
            %!statistics{$SESSION_ID}.bytes-received(:$BYTES_RECEIVED);

            $row                = Array.new;
### Session:        126052 {NODE@Linux x86-64@SSL} [03:39:48]
            $row.push:              $SESSION_ID 
                                ~   '{'
                                ~   $SESSION_TYPE
                                ~   '@'
                                ~   $CLIENT_PLATFORM
                                ~   '@'
                                ~   COMMMETHOD
                                ~   '} ['
                                ~   %!statistics{$SESSION_ID}.seconds-to-d-hh-mm-ss((now - $START_TIME).Int)
                                ~   ']';
### State:          IdleW [00:03:58]
            $row.push:              $STATE
                                ~   ' ['
                                ~   %!statistics{$SESSION_ID}.seconds-to-d-hh-mm-ss($WAIT_SECONDS)
                                ~   ']';

### Bytes Sent:     450.0 M [Δ102.4 K]
            $row.push:              %!statistics{$SESSION_ID}.bytes-to-unit(%!statistics{$SESSION_ID}.bytes-sent);
                                ~   "[\x[0394]"
                                ~   %!statistics{$SESSION_ID}.bytes-to-unit(%!statistics{$SESSION_ID}.bytes-sent-delta)
                                ~   ']';
### Bytes Received: 450.0 M [Δ102.4 K]
            $row.push:              %!statistics{$SESSION_ID}.bytes-to-unit(%!statistics{$SESSION_ID}.bytes-received);
                                ~   "[\x[0394]"
                                ~   %!statistics{$SESSION_ID}.bytes-to-unit(%!statistics{$SESSION_ID}.bytes-received-delta)
                                ~   ']';
### Client:         DFS2K16-19@FO
            $row.push:              CLIENT_NAME
                                ~   $FAIL_OVER_MODE eq 'No' ?? '' !! '@FO';
            self.table.add-row: $row;
        }
    }
}

#                  Session                          State               Bytes Sent        Bytes Received       Client
# 126052 {NODE@Linux x86-64@SSL} [03:39:48]     IdleW [00:03:58]       450.0 M [102.4 K]  450.0 M [102.4 K]  DFS2K16-19@FO

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP server name
    Int:D   :$interval      where * >= 5    = 58,   #= Refresh every --interval seconds (minimum 5s)
    Int:D   :$count                         = 1,    #= Number of refreshes (0 is infinity)
    Bool    :$grid,                                 #= Full table grid
    Bool    :$clear,                                #= Clear the screen with each iteration
    Str     :$client-name,                          #= ISP CLIENT/NODE name
) {
    my @command     = ['SELECT', '*', 'FROM', 'SESSIONS'];
    my @fields;
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Session'),          :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('State'),            :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Bytes Sent'),       :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Bytes Received'),   :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Client'),           :alignment('l'));
    my $reporter    = Reporter.new(
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$grid,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Sessions'),
                                    :@command,
                                    :@fields,
                                    :$client-name,
                                    :sort-by('Session'),
                                  );
    $reporter.loop;
}

=finish
